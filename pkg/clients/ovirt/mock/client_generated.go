// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/ovirt/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta10 "github.com/uccps-samples/api/machine/v1beta1"
	v1beta1 "github.com/uccps-samples/cluster-api-provider-ovirt/pkg/apis/ovirtprovider/v1beta1"
	ovirt "github.com/uccps-samples/cluster-api-provider-ovirt/pkg/clients/ovirt"
	go_ovirt "github.com/ovirt/go-ovirt"
)

//go:generate go run ../../vendor/github.com/golang/mock/mockgen mockgen -source=pkg/clients/ovirt/interface.go -destination=pkg/clients/ovirt/mock/client_generated.go -package=mocks

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateVMByMachine mocks base method.
func (m *MockClient) CreateVMByMachine(machineName, ovirtClusterID string, ignition []byte, providerSpec *v1beta1.OvirtMachineProviderSpec) (*ovirt.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVMByMachine", machineName, ovirtClusterID, ignition, providerSpec)
	ret0, _ := ret[0].(*ovirt.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVMByMachine indicates an expected call of CreateVMByMachine.
func (mr *MockClientMockRecorder) CreateVMByMachine(machineName, ovirtClusterID, ignition, providerSpec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVMByMachine", reflect.TypeOf((*MockClient)(nil).CreateVMByMachine), machineName, ovirtClusterID, ignition, providerSpec)
}

// DeleteVM mocks base method.
func (m *MockClient) DeleteVM(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVM", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVM indicates an expected call of DeleteVM.
func (mr *MockClientMockRecorder) DeleteVM(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVM", reflect.TypeOf((*MockClient)(nil).DeleteVM), id)
}

// FindVirtualMachineIP mocks base method.
func (m *MockClient) FindVirtualMachineIP(id string, excludeAddr map[string]int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVirtualMachineIP", id, excludeAddr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVirtualMachineIP indicates an expected call of FindVirtualMachineIP.
func (mr *MockClientMockRecorder) FindVirtualMachineIP(id, excludeAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVirtualMachineIP", reflect.TypeOf((*MockClient)(nil).FindVirtualMachineIP), id, excludeAddr)
}

// GetEngineVersion mocks base method.
func (m *MockClient) GetEngineVersion() (*go_ovirt.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngineVersion")
	ret0, _ := ret[0].(*go_ovirt.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEngineVersion indicates an expected call of GetEngineVersion.
func (mr *MockClientMockRecorder) GetEngineVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngineVersion", reflect.TypeOf((*MockClient)(nil).GetEngineVersion))
}

// GetVMByID mocks base method.
func (m *MockClient) GetVMByID(id string) (*ovirt.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMByID", id)
	ret0, _ := ret[0].(*ovirt.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMByID indicates an expected call of GetVMByID.
func (mr *MockClientMockRecorder) GetVMByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMByID", reflect.TypeOf((*MockClient)(nil).GetVMByID), id)
}

// GetVMByMachine mocks base method.
func (m *MockClient) GetVMByMachine(machine v1beta10.Machine) (*ovirt.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMByMachine", machine)
	ret0, _ := ret[0].(*ovirt.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMByMachine indicates an expected call of GetVMByMachine.
func (mr *MockClientMockRecorder) GetVMByMachine(machine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMByMachine", reflect.TypeOf((*MockClient)(nil).GetVMByMachine), machine)
}

// GetVMByName mocks base method.
func (m *MockClient) GetVMByName(mName string) (*ovirt.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMByName", mName)
	ret0, _ := ret[0].(*ovirt.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMByName indicates an expected call of GetVMByName.
func (mr *MockClientMockRecorder) GetVMByName(mName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMByName", reflect.TypeOf((*MockClient)(nil).GetVMByName), mName)
}

// StartVM mocks base method.
func (m *MockClient) StartVM(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartVM", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartVM indicates an expected call of StartVM.
func (mr *MockClientMockRecorder) StartVM(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartVM", reflect.TypeOf((*MockClient)(nil).StartVM), id)
}
